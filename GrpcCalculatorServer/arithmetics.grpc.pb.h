// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: arithmetics.proto
// Original file comments:
// [START declaration]
#ifndef GRPC_arithmetics_2eproto__INCLUDED
#define GRPC_arithmetics_2eproto__INCLUDED

#include "arithmetics.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace arithmetics {

// [START service]
// The arithmetic service definition.
class Arithmetics final {
 public:
  static constexpr char const* service_full_name() {
    return "arithmetics.Arithmetics";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Add(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::arithmetics::OneValueReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::arithmetics::OneValueReply>> AsyncAdd(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::arithmetics::OneValueReply>>(AsyncAddRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::arithmetics::OneValueReply>> PrepareAsyncAdd(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::arithmetics::OneValueReply>>(PrepareAsyncAddRaw(context, request, cq));
    }
    virtual ::grpc::Status Minus(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::arithmetics::OneValueReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::arithmetics::OneValueReply>> AsyncMinus(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::arithmetics::OneValueReply>>(AsyncMinusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::arithmetics::OneValueReply>> PrepareAsyncMinus(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::arithmetics::OneValueReply>>(PrepareAsyncMinusRaw(context, request, cq));
    }
    virtual ::grpc::Status Multiply(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::arithmetics::OneValueReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::arithmetics::OneValueReply>> AsyncMultiply(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::arithmetics::OneValueReply>>(AsyncMultiplyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::arithmetics::OneValueReply>> PrepareAsyncMultiply(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::arithmetics::OneValueReply>>(PrepareAsyncMultiplyRaw(context, request, cq));
    }
    virtual ::grpc::Status Divide(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::arithmetics::OneValueReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::arithmetics::OneValueReply>> AsyncDivide(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::arithmetics::OneValueReply>>(AsyncDivideRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::arithmetics::OneValueReply>> PrepareAsyncDivide(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::arithmetics::OneValueReply>>(PrepareAsyncDivideRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Add(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Add(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Add(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Minus(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Minus(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Minus(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Multiply(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Multiply(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Multiply(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Divide(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Divide(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Divide(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::arithmetics::OneValueReply>* AsyncAddRaw(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::arithmetics::OneValueReply>* PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::arithmetics::OneValueReply>* AsyncMinusRaw(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::arithmetics::OneValueReply>* PrepareAsyncMinusRaw(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::arithmetics::OneValueReply>* AsyncMultiplyRaw(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::arithmetics::OneValueReply>* PrepareAsyncMultiplyRaw(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::arithmetics::OneValueReply>* AsyncDivideRaw(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::arithmetics::OneValueReply>* PrepareAsyncDivideRaw(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Add(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::arithmetics::OneValueReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>> AsyncAdd(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>>(AsyncAddRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>> PrepareAsyncAdd(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>>(PrepareAsyncAddRaw(context, request, cq));
    }
    ::grpc::Status Minus(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::arithmetics::OneValueReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>> AsyncMinus(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>>(AsyncMinusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>> PrepareAsyncMinus(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>>(PrepareAsyncMinusRaw(context, request, cq));
    }
    ::grpc::Status Multiply(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::arithmetics::OneValueReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>> AsyncMultiply(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>>(AsyncMultiplyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>> PrepareAsyncMultiply(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>>(PrepareAsyncMultiplyRaw(context, request, cq));
    }
    ::grpc::Status Divide(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::arithmetics::OneValueReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>> AsyncDivide(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>>(AsyncDivideRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>> PrepareAsyncDivide(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>>(PrepareAsyncDivideRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Add(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Add(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Add(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Minus(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Minus(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Minus(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Multiply(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Multiply(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Multiply(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Divide(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Divide(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Divide(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>* AsyncAddRaw(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>* PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>* AsyncMinusRaw(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>* PrepareAsyncMinusRaw(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>* AsyncMultiplyRaw(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>* PrepareAsyncMultiplyRaw(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>* AsyncDivideRaw(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>* PrepareAsyncDivideRaw(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Add_;
    const ::grpc::internal::RpcMethod rpcmethod_Minus_;
    const ::grpc::internal::RpcMethod rpcmethod_Multiply_;
    const ::grpc::internal::RpcMethod rpcmethod_Divide_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Add(::grpc::ServerContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response);
    virtual ::grpc::Status Minus(::grpc::ServerContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response);
    virtual ::grpc::Status Multiply(::grpc::ServerContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response);
    virtual ::grpc::Status Divide(::grpc::ServerContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Add() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAdd(::grpc::ServerContext* context, ::arithmetics::TwoValueRequest* request, ::grpc::ServerAsyncResponseWriter< ::arithmetics::OneValueReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Minus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Minus() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Minus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Minus(::grpc::ServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMinus(::grpc::ServerContext* context, ::arithmetics::TwoValueRequest* request, ::grpc::ServerAsyncResponseWriter< ::arithmetics::OneValueReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Multiply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Multiply() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Multiply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Multiply(::grpc::ServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMultiply(::grpc::ServerContext* context, ::arithmetics::TwoValueRequest* request, ::grpc::ServerAsyncResponseWriter< ::arithmetics::OneValueReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Divide : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Divide() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Divide() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Divide(::grpc::ServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDivide(::grpc::ServerContext* context, ::arithmetics::TwoValueRequest* request, ::grpc::ServerAsyncResponseWriter< ::arithmetics::OneValueReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Add<WithAsyncMethod_Minus<WithAsyncMethod_Multiply<WithAsyncMethod_Divide<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Add() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::arithmetics::TwoValueRequest, ::arithmetics::OneValueReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response) { return this->Add(context, request, response); }));}
    void SetMessageAllocatorFor_Add(
        ::grpc::experimental::MessageAllocator< ::arithmetics::TwoValueRequest, ::arithmetics::OneValueReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::arithmetics::TwoValueRequest, ::arithmetics::OneValueReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Add(
      ::grpc::CallbackServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Add(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Minus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Minus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::arithmetics::TwoValueRequest, ::arithmetics::OneValueReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response) { return this->Minus(context, request, response); }));}
    void SetMessageAllocatorFor_Minus(
        ::grpc::experimental::MessageAllocator< ::arithmetics::TwoValueRequest, ::arithmetics::OneValueReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::arithmetics::TwoValueRequest, ::arithmetics::OneValueReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Minus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Minus(::grpc::ServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Minus(
      ::grpc::CallbackServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Minus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Multiply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Multiply() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::arithmetics::TwoValueRequest, ::arithmetics::OneValueReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response) { return this->Multiply(context, request, response); }));}
    void SetMessageAllocatorFor_Multiply(
        ::grpc::experimental::MessageAllocator< ::arithmetics::TwoValueRequest, ::arithmetics::OneValueReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::arithmetics::TwoValueRequest, ::arithmetics::OneValueReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Multiply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Multiply(::grpc::ServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Multiply(
      ::grpc::CallbackServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Multiply(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Divide : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Divide() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::arithmetics::TwoValueRequest, ::arithmetics::OneValueReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response) { return this->Divide(context, request, response); }));}
    void SetMessageAllocatorFor_Divide(
        ::grpc::experimental::MessageAllocator< ::arithmetics::TwoValueRequest, ::arithmetics::OneValueReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::arithmetics::TwoValueRequest, ::arithmetics::OneValueReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Divide() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Divide(::grpc::ServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Divide(
      ::grpc::CallbackServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Divide(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Add<ExperimentalWithCallbackMethod_Minus<ExperimentalWithCallbackMethod_Multiply<ExperimentalWithCallbackMethod_Divide<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Add<ExperimentalWithCallbackMethod_Minus<ExperimentalWithCallbackMethod_Multiply<ExperimentalWithCallbackMethod_Divide<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Add() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Minus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Minus() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Minus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Minus(::grpc::ServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Multiply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Multiply() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Multiply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Multiply(::grpc::ServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Divide : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Divide() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Divide() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Divide(::grpc::ServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Add() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAdd(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Minus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Minus() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Minus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Minus(::grpc::ServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMinus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Multiply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Multiply() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Multiply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Multiply(::grpc::ServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMultiply(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Divide : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Divide() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Divide() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Divide(::grpc::ServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDivide(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Add() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Add(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Add(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Add(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Minus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Minus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Minus(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Minus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Minus(::grpc::ServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Minus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Minus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Multiply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Multiply() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Multiply(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Multiply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Multiply(::grpc::ServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Multiply(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Multiply(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Divide : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Divide() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Divide(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Divide() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Divide(::grpc::ServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Divide(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Divide(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Add() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::arithmetics::TwoValueRequest, ::arithmetics::OneValueReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::arithmetics::TwoValueRequest, ::arithmetics::OneValueReply>* streamer) {
                       return this->StreamedAdd(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAdd(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::arithmetics::TwoValueRequest,::arithmetics::OneValueReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Minus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Minus() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::arithmetics::TwoValueRequest, ::arithmetics::OneValueReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::arithmetics::TwoValueRequest, ::arithmetics::OneValueReply>* streamer) {
                       return this->StreamedMinus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Minus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Minus(::grpc::ServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMinus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::arithmetics::TwoValueRequest,::arithmetics::OneValueReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Multiply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Multiply() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::arithmetics::TwoValueRequest, ::arithmetics::OneValueReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::arithmetics::TwoValueRequest, ::arithmetics::OneValueReply>* streamer) {
                       return this->StreamedMultiply(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Multiply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Multiply(::grpc::ServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMultiply(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::arithmetics::TwoValueRequest,::arithmetics::OneValueReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Divide : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Divide() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::arithmetics::TwoValueRequest, ::arithmetics::OneValueReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::arithmetics::TwoValueRequest, ::arithmetics::OneValueReply>* streamer) {
                       return this->StreamedDivide(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Divide() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Divide(::grpc::ServerContext* /*context*/, const ::arithmetics::TwoValueRequest* /*request*/, ::arithmetics::OneValueReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDivide(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::arithmetics::TwoValueRequest,::arithmetics::OneValueReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Add<WithStreamedUnaryMethod_Minus<WithStreamedUnaryMethod_Multiply<WithStreamedUnaryMethod_Divide<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Add<WithStreamedUnaryMethod_Minus<WithStreamedUnaryMethod_Multiply<WithStreamedUnaryMethod_Divide<Service > > > > StreamedService;
};

}  // namespace arithmetics


#endif  // GRPC_arithmetics_2eproto__INCLUDED
