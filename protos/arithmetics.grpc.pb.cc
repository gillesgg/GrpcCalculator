// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: arithmetics.proto

#include "arithmetics.pb.h"
#include "arithmetics.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace arithmetics {

static const char* Arithmetics_method_names[] = {
  "/arithmetics.Arithmetics/Add",
  "/arithmetics.Arithmetics/Minus",
  "/arithmetics.Arithmetics/Multiply",
  "/arithmetics.Arithmetics/Divide",
};

std::unique_ptr< Arithmetics::Stub> Arithmetics::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Arithmetics::Stub> stub(new Arithmetics::Stub(channel));
  return stub;
}

Arithmetics::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Add_(Arithmetics_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Minus_(Arithmetics_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Multiply_(Arithmetics_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Divide_(Arithmetics_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Arithmetics::Stub::Add(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::arithmetics::OneValueReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Add_, context, request, response);
}

void Arithmetics::Stub::experimental_async::Add(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Add_, context, request, response, std::move(f));
}

void Arithmetics::Stub::experimental_async::Add(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Add_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>* Arithmetics::Stub::PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::arithmetics::OneValueReply>::Create(channel_.get(), cq, rpcmethod_Add_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>* Arithmetics::Stub::AsyncAddRaw(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Arithmetics::Stub::Minus(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::arithmetics::OneValueReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Minus_, context, request, response);
}

void Arithmetics::Stub::experimental_async::Minus(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Minus_, context, request, response, std::move(f));
}

void Arithmetics::Stub::experimental_async::Minus(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Minus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>* Arithmetics::Stub::PrepareAsyncMinusRaw(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::arithmetics::OneValueReply>::Create(channel_.get(), cq, rpcmethod_Minus_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>* Arithmetics::Stub::AsyncMinusRaw(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMinusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Arithmetics::Stub::Multiply(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::arithmetics::OneValueReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Multiply_, context, request, response);
}

void Arithmetics::Stub::experimental_async::Multiply(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Multiply_, context, request, response, std::move(f));
}

void Arithmetics::Stub::experimental_async::Multiply(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Multiply_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>* Arithmetics::Stub::PrepareAsyncMultiplyRaw(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::arithmetics::OneValueReply>::Create(channel_.get(), cq, rpcmethod_Multiply_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>* Arithmetics::Stub::AsyncMultiplyRaw(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMultiplyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Arithmetics::Stub::Divide(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::arithmetics::OneValueReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Divide_, context, request, response);
}

void Arithmetics::Stub::experimental_async::Divide(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Divide_, context, request, response, std::move(f));
}

void Arithmetics::Stub::experimental_async::Divide(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Divide_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>* Arithmetics::Stub::PrepareAsyncDivideRaw(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::arithmetics::OneValueReply>::Create(channel_.get(), cq, rpcmethod_Divide_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::arithmetics::OneValueReply>* Arithmetics::Stub::AsyncDivideRaw(::grpc::ClientContext* context, const ::arithmetics::TwoValueRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDivideRaw(context, request, cq);
  result->StartCall();
  return result;
}

Arithmetics::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Arithmetics_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Arithmetics::Service, ::arithmetics::TwoValueRequest, ::arithmetics::OneValueReply>(
          [](Arithmetics::Service* service,
             ::grpc::ServerContext* ctx,
             const ::arithmetics::TwoValueRequest* req,
             ::arithmetics::OneValueReply* resp) {
               return service->Add(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Arithmetics_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Arithmetics::Service, ::arithmetics::TwoValueRequest, ::arithmetics::OneValueReply>(
          [](Arithmetics::Service* service,
             ::grpc::ServerContext* ctx,
             const ::arithmetics::TwoValueRequest* req,
             ::arithmetics::OneValueReply* resp) {
               return service->Minus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Arithmetics_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Arithmetics::Service, ::arithmetics::TwoValueRequest, ::arithmetics::OneValueReply>(
          [](Arithmetics::Service* service,
             ::grpc::ServerContext* ctx,
             const ::arithmetics::TwoValueRequest* req,
             ::arithmetics::OneValueReply* resp) {
               return service->Multiply(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Arithmetics_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Arithmetics::Service, ::arithmetics::TwoValueRequest, ::arithmetics::OneValueReply>(
          [](Arithmetics::Service* service,
             ::grpc::ServerContext* ctx,
             const ::arithmetics::TwoValueRequest* req,
             ::arithmetics::OneValueReply* resp) {
               return service->Divide(ctx, req, resp);
             }, this)));
}

Arithmetics::Service::~Service() {
}

::grpc::Status Arithmetics::Service::Add(::grpc::ServerContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Arithmetics::Service::Minus(::grpc::ServerContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Arithmetics::Service::Multiply(::grpc::ServerContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Arithmetics::Service::Divide(::grpc::ServerContext* context, const ::arithmetics::TwoValueRequest* request, ::arithmetics::OneValueReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace arithmetics

